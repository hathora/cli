{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"AppName": {
				"type": "string",
				"example": "minecraft",
				"description": "Readable name for an application. Must be unique within an organization.",
				"maxLength": 32,
				"pattern": "^[a-z0-9-]+$"
			},
			"AppId": {
				"type": "string",
				"example": "app-af469a92-5b45-4565-b3c4-b79878de67d2",
				"description": "System generated unique identifier for an application."
			},
			"Record_string.never_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"OrgId": {
				"type": "string",
				"example": "google-oauth2|107030234048588177467",
				"description": "System generated unique identifier for an organization."
			},
			"Application": {
				"properties": {
					"deletedBy": {
						"type": "string",
						"nullable": true,
						"description": "Email address for the user that deleted the application.",
						"example": "dev@hathora.dev"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"nullable": true,
						"description": "When the application was deleted."
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"description": "When the application was created."
					},
					"createdBy": {
						"type": "string",
						"description": "Email address for the user that deleted the application.",
						"example": "dev@hathora.dev"
					},
					"orgId": {
						"$ref": "#/components/schemas/OrgId"
					},
					"authConfiguration": {
						"properties": {
							"google": {
								"properties": {
									"clientId": {
										"type": "string"
									}
								},
								"required": [
									"clientId"
								],
								"type": "object"
							},
							"nickname": {
								"$ref": "#/components/schemas/Record_string.never_"
							},
							"anonymous": {
								"$ref": "#/components/schemas/Record_string.never_"
							}
						},
						"type": "object",
						"description": "Used to authenticate player requests. Use your own authentication or Hathora's Auth Client."
					},
					"appSecret": {
						"type": "string",
						"description": "Secret that is used for identity and access management.",
						"example": "secret-6f706e83-0ec1-437a-9a46-7d4281eb2f39"
					},
					"appId": {
						"$ref": "#/components/schemas/AppId"
					},
					"appName": {
						"$ref": "#/components/schemas/AppName"
					}
				},
				"required": [
					"deletedBy",
					"deletedAt",
					"createdAt",
					"createdBy",
					"orgId",
					"authConfiguration",
					"appSecret",
					"appId",
					"appName"
				],
				"type": "object",
				"description": "An application object is the top level namespace for the game server."
			},
			"DeploymentId": {
				"type": "integer",
				"format": "int32",
				"example": 1,
				"description": "System generated id for a deployment. Increments by 1."
			},
			"TransportType": {
				"type": "string",
				"enum": [
					"tcp",
					"udp",
					"tls"
				],
				"description": "Transport type specifies the underlying communication protocol to the exposed port."
			},
			"ContainerPort": {
				"properties": {
					"transportType": {
						"$ref": "#/components/schemas/TransportType"
					},
					"port": {
						"type": "integer",
						"format": "int32",
						"example": 8000,
						"minimum": 1,
						"maximum": 65535
					},
					"name": {
						"type": "string",
						"description": "Readable name for the port.",
						"example": "default",
						"minLength": 1,
						"maxLength": 100,
						"pattern": "^[a-z][a-z0-9-]*$"
					}
				},
				"required": [
					"transportType",
					"port",
					"name"
				],
				"type": "object",
				"description": "A container port object represents the transport configruations for how your server will listen."
			},
			"PlanName": {
				"type": "string",
				"enum": [
					"tiny",
					"small",
					"medium",
					"large"
				],
				"example": "tiny",
				"description": "A plan defines how much CPU and memory is required to run an instance of your game server.\n\n`tiny`: shared core, 1gb memory\n\n`small`: 1 core, 2gb memory\n\n`medium`: 2 core, 4gb memory\n\n`large`: 4 core, 8gb memory"
			},
			"NumRoomsPerProcess": {
				"type": "integer",
				"format": "int32",
				"example": 3,
				"description": "Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.",
				"minimum": 1,
				"maxLength": 10000
			},
			"Deployment": {
				"properties": {
					"env": {
						"items": {
							"properties": {
								"value": {
									"type": "string",
									"example": "TRUE",
									"maxLength": 5000
								},
								"name": {
									"type": "string",
									"example": "EULA",
									"minLength": 1,
									"maxLength": 100,
									"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
								}
							},
							"required": [
								"value",
								"name"
							],
							"type": "object"
						},
						"type": "array",
						"description": "The environment variable that our process will have access to at runtime.",
						"maxItems": 100
					},
					"roomsPerProcess": {
						"$ref": "#/components/schemas/NumRoomsPerProcess"
					},
					"planName": {
						"$ref": "#/components/schemas/PlanName"
					},
					"additionalContainerPorts": {
						"items": {
							"$ref": "#/components/schemas/ContainerPort"
						},
						"type": "array",
						"description": "Additional ports your server listens on.",
						"example": {
							"transportType": "tcp",
							"port": 4000,
							"name": "debug"
						},
						"maxItems": 2
					},
					"defaultContainerPort": {
						"$ref": "#/components/schemas/ContainerPort",
						"description": "Describes the primary port your process listens on."
					},
					"transportType": {
						"type": "string",
						"enum": [
							"tcp",
							"udp",
							"tls"
						],
						"deprecated": true
					},
					"containerPort": {
						"type": "number",
						"format": "double",
						"deprecated": true
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"description": "When the deployment was created."
					},
					"createdBy": {
						"type": "string",
						"description": "Email address for the user that created the deployment.",
						"example": "dev@hathora.dev"
					},
					"requestedMemoryMB": {
						"type": "number",
						"format": "double",
						"description": "The amount of memory allocated to your process.",
						"example": 1024
					},
					"requestedCPU": {
						"type": "number",
						"format": "double",
						"description": "The number of cores allocated to your process.",
						"example": 0.5
					},
					"deploymentId": {
						"$ref": "#/components/schemas/DeploymentId"
					},
					"buildId": {
						"type": "integer",
						"format": "int32",
						"description": "System generated id for a build associated with this deployment. Increments by 1.",
						"example": 1
					},
					"appId": {
						"$ref": "#/components/schemas/AppId"
					}
				},
				"required": [
					"env",
					"roomsPerProcess",
					"planName",
					"additionalContainerPorts",
					"defaultContainerPort",
					"transportType",
					"containerPort",
					"createdAt",
					"createdBy",
					"requestedMemoryMB",
					"requestedCPU",
					"deploymentId",
					"buildId",
					"appId"
				],
				"type": "object",
				"description": "Deployment is a versioned configuration for a build that describes runtime behavior."
			},
			"ApplicationWithDeployment": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Application"
					},
					{
						"properties": {
							"deployment": {
								"$ref": "#/components/schemas/Deployment"
							}
						},
						"required": [
							"deployment"
						],
						"type": "object"
					}
				]
			},
			"AppConfig": {
				"properties": {
					"authConfiguration": {
						"properties": {
							"google": {
								"properties": {
									"clientId": {
										"type": "string"
									}
								},
								"required": [
									"clientId"
								],
								"type": "object"
							},
							"nickname": {
								"$ref": "#/components/schemas/Record_string.never_"
							},
							"anonymous": {
								"$ref": "#/components/schemas/Record_string.never_"
							}
						},
						"type": "object"
					},
					"appName": {
						"$ref": "#/components/schemas/AppName"
					}
				},
				"required": [
					"authConfiguration",
					"appName"
				],
				"type": "object"
			},
			"LoginResponse": {
				"properties": {
					"token": {
						"type": "string"
					}
				},
				"required": [
					"token"
				],
				"type": "object"
			},
			"LoginNicknameRequest": {
				"properties": {
					"nickname": {
						"type": "string"
					}
				},
				"required": [
					"nickname"
				],
				"type": "object"
			},
			"LoginGoogleRequest": {
				"properties": {
					"idToken": {
						"type": "string"
					}
				},
				"required": [
					"idToken"
				],
				"type": "object"
			},
			"CardBrand": {
				"type": "string",
				"enum": [
					"amex",
					"cartes_bancaires",
					"diners",
					"discover",
					"jcb",
					"mastercard",
					"visa",
					"unionpay",
					"card"
				]
			},
			"CardPaymentMethod": {
				"properties": {
					"last4": {
						"type": "string"
					},
					"brand": {
						"$ref": "#/components/schemas/CardBrand"
					}
				},
				"required": [
					"last4",
					"brand"
				],
				"type": "object"
			},
			"AchPaymentMethod": {
				"properties": {
					"last4": {
						"type": "string"
					},
					"bankName": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"LinkPaymentMethod": {
				"properties": {
					"email": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"Partial__card-CardPaymentMethod--ach-AchPaymentMethod--link-LinkPaymentMethod--__": {
				"properties": {
					"card": {
						"$ref": "#/components/schemas/CardPaymentMethod"
					},
					"ach": {
						"$ref": "#/components/schemas/AchPaymentMethod"
					},
					"link": {
						"$ref": "#/components/schemas/LinkPaymentMethod"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"PaymentMethod": {
				"$ref": "#/components/schemas/Partial__card-CardPaymentMethod--ach-AchPaymentMethod--link-LinkPaymentMethod--__"
			},
			"CustomerPortalUrl": {
				"properties": {
					"returnUrl": {
						"type": "string"
					}
				},
				"required": [
					"returnUrl"
				],
				"type": "object"
			},
			"Invoice": {
				"properties": {
					"status": {
						"type": "string",
						"enum": [
							"pending",
							"paid",
							"overdue"
						]
					},
					"amountDue": {
						"type": "number",
						"format": "double"
					},
					"pdfUrl": {
						"type": "string"
					},
					"dueDate": {
						"type": "string",
						"format": "date-time"
					},
					"year": {
						"type": "number",
						"format": "double"
					},
					"month": {
						"type": "number",
						"format": "double"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"status",
					"amountDue",
					"pdfUrl",
					"dueDate",
					"year",
					"month",
					"id"
				],
				"type": "object",
				"description": "Billing types"
			},
			"BuildId": {
				"type": "integer",
				"format": "int32",
				"example": 1,
				"description": "System generated id for a build. Increments by 1."
			},
			"Region": {
				"type": "string",
				"enum": [
					"Seattle",
					"Washington_DC",
					"Chicago",
					"London",
					"Frankfurt",
					"Mumbai",
					"Singapore",
					"Tokyo",
					"Sydney",
					"Sao_Paulo"
				]
			},
			"BuildTag": {
				"type": "string",
				"example": "0.1.14-14c793",
				"description": "Build tag to associate a version with a build. It is accessible via getBuildInfo().",
				"maxLength": 1000
			},
			"Build": {
				"properties": {
					"buildTag": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BuildTag"
							}
						],
						"nullable": true
					},
					"regionalContainerTags": {
						"items": {
							"properties": {
								"containerTag": {
									"type": "string"
								},
								"region": {
									"$ref": "#/components/schemas/Region"
								}
							},
							"required": [
								"containerTag",
								"region"
							],
							"type": "object"
						},
						"type": "array",
						"description": "An alias for the container image in our regional registries."
					},
					"imageSize": {
						"type": "number",
						"format": "double",
						"description": "Image size in MB."
					},
					"status": {
						"type": "string",
						"enum": [
							"created",
							"running",
							"succeeded",
							"failed"
						],
						"description": "Status of creating a build.\n\n`created`: a new `buildId` was generated\n\n`running`: the container image is being built\n\n`succeeded`: the container image was successfully built and stored in our registry\n\n`failed`: there was an issue creating and storing the container image in our container registry"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"nullable": true,
						"description": "When the container image was deleted."
					},
					"finishedAt": {
						"type": "string",
						"format": "date-time",
						"nullable": true,
						"description": "When the container image finished being built."
					},
					"startedAt": {
						"type": "string",
						"format": "date-time",
						"nullable": true,
						"description": "When the container image starts getting built."
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"description": "When a new `buildId` is generated."
					},
					"createdBy": {
						"type": "string",
						"description": "Email address for the user that created the build.",
						"example": "dev@hathora.dev"
					},
					"buildId": {
						"$ref": "#/components/schemas/BuildId"
					},
					"appId": {
						"$ref": "#/components/schemas/AppId"
					}
				},
				"required": [
					"buildTag",
					"regionalContainerTags",
					"imageSize",
					"status",
					"deletedAt",
					"finishedAt",
					"startedAt",
					"createdAt",
					"createdBy",
					"buildId",
					"appId"
				],
				"type": "object",
				"description": "Build is a versioned artifact for a game server's container image and its data."
			},
			"CreateBuildRequest": {
				"properties": {
					"buildTag": {
						"$ref": "#/components/schemas/BuildTag"
					}
				},
				"type": "object"
			},
			"DeploymentConfig": {
				"properties": {
					"env": {
						"items": {
							"properties": {
								"value": {
									"type": "string",
									"example": "TRUE",
									"maxLength": 5000
								},
								"name": {
									"type": "string",
									"example": "EULA",
									"minLength": 1,
									"maxLength": 100,
									"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
								}
							},
							"required": [
								"value",
								"name"
							],
							"type": "object"
						},
						"type": "array",
						"description": "The environment variable that our process will have access to at runtime.",
						"maxItems": 100
					},
					"roomsPerProcess": {
						"$ref": "#/components/schemas/NumRoomsPerProcess"
					},
					"planName": {
						"$ref": "#/components/schemas/PlanName"
					},
					"additionalContainerPorts": {
						"items": {
							"$ref": "#/components/schemas/ContainerPort"
						},
						"type": "array",
						"description": "Additional ports your server listens on.",
						"maxItems": 2
					},
					"transportType": {
						"$ref": "#/components/schemas/TransportType"
					},
					"containerPort": {
						"type": "integer",
						"format": "int32",
						"description": "Default port the server listens on.",
						"example": 4000,
						"minimum": 1,
						"maximum": 65535
					}
				},
				"required": [
					"env",
					"roomsPerProcess",
					"planName",
					"transportType",
					"containerPort"
				],
				"type": "object",
				"description": "User specified deployment configuration for your application at runtime."
			},
			"DiscoveryResponse": {
				"items": {
					"properties": {
						"port": {
							"type": "number",
							"format": "double"
						},
						"host": {
							"type": "string"
						},
						"region": {
							"$ref": "#/components/schemas/Region"
						}
					},
					"required": [
						"port",
						"host",
						"region"
					],
					"type": "object"
				},
				"type": "array"
			},
			"RoomId": {
				"type": "string",
				"example": "2swovpy1fnunu",
				"description": "Unique identifier to a game session or match. Use either a system generated ID or pass in your own.",
				"minLength": 1,
				"maxLength": 100,
				"pattern": "^[a-zA-Z0-9_-]*$"
			},
			"LobbyVisibility": {
				"type": "string",
				"enum": [
					"private",
					"public",
					"local"
				],
				"example": "private",
				"description": "Types of lobbies a player can create.\n\n`private`: the player who created the room must share the roomId with their friends\n\n`public`: visible in the public lobby list, anyone can join\n\n`local`: for testing with a server running locally"
			},
			"LobbyInitialConfig": {
				"additionalProperties": false,
				"type": "object",
				"description": "User input to initialize the game state. Object must be smaller than 64KB."
			},
			"Lobby": {
				"properties": {
					"state": {
						"additionalProperties": false,
						"type": "object",
						"description": "JSON blob to store metadata for a room. Must be smaller than 1MB."
					},
					"initialConfig": {
						"$ref": "#/components/schemas/LobbyInitialConfig"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"description": "When the lobby was created."
					},
					"createdBy": {
						"type": "string",
						"description": "Email address for the user that created the lobby.",
						"example": "dev@hathora.dev"
					},
					"local": {
						"type": "boolean",
						"example": "false",
						"deprecated": true
					},
					"visibility": {
						"$ref": "#/components/schemas/LobbyVisibility"
					},
					"region": {
						"$ref": "#/components/schemas/Region"
					},
					"roomId": {
						"$ref": "#/components/schemas/RoomId"
					},
					"appId": {
						"$ref": "#/components/schemas/AppId"
					}
				},
				"required": [
					"initialConfig",
					"createdAt",
					"createdBy",
					"local",
					"visibility",
					"region",
					"roomId",
					"appId"
				],
				"type": "object",
				"description": "A lobby object allows you to store and manage metadata for your rooms."
			},
			"CreateLobbyRequest": {
				"properties": {
					"visibility": {
						"$ref": "#/components/schemas/LobbyVisibility"
					},
					"initialConfig": {
						"$ref": "#/components/schemas/LobbyInitialConfig"
					},
					"region": {
						"$ref": "#/components/schemas/Region"
					}
				},
				"required": [
					"visibility",
					"initialConfig",
					"region"
				],
				"type": "object"
			},
			"SetLobbyStateRequest": {
				"properties": {
					"state": {
						"additionalProperties": false,
						"type": "object",
						"description": "JSON blob to store metadata for a room. Must be smaller than 1MB."
					}
				},
				"required": [
					"state"
				],
				"type": "object"
			},
			"LogsFollow": {
				"type": "boolean",
				"default": "false",
				"description": "Stream logs in realtime."
			},
			"TailLines": {
				"type": "integer",
				"format": "int32",
				"default": "100",
				"description": "Number of lines to return from most recent logs history.",
				"minimum": 1,
				"maximum": 5000
			},
			"ProcessId": {
				"type": "string",
				"example": "cbfcddd2-0006-43ae-996c-995fff7bed2e",
				"description": "System generated unique identifier to a runtime instance of your game server."
			},
			"VerificationEmailResponse": {
				"properties": {
					"status": {
						"type": "string",
						"enum": [
							"success"
						],
						"nullable": false
					}
				},
				"required": [
					"status"
				],
				"type": "object"
			},
			"VerificationEmailRequest": {
				"properties": {
					"userId": {
						"type": "string"
					}
				},
				"required": [
					"userId"
				],
				"type": "object"
			},
			"MetricValue": {
				"properties": {
					"value": {
						"type": "number",
						"format": "double"
					},
					"timestamp": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"value",
					"timestamp"
				],
				"type": "object"
			},
			"Record_Partial_MetricName_.MetricValue-Array_": {
				"properties": {
					"cpu": {
						"items": {
							"$ref": "#/components/schemas/MetricValue"
						},
						"type": "array"
					},
					"memory": {
						"items": {
							"$ref": "#/components/schemas/MetricValue"
						},
						"type": "array"
					},
					"rate_egress": {
						"items": {
							"$ref": "#/components/schemas/MetricValue"
						},
						"type": "array"
					},
					"total_egress": {
						"items": {
							"$ref": "#/components/schemas/MetricValue"
						},
						"type": "array"
					}
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"MetricsResponse": {
				"$ref": "#/components/schemas/Record_Partial_MetricName_.MetricValue-Array_"
			},
			"MetricName": {
				"type": "string",
				"enum": [
					"cpu",
					"memory",
					"rate_egress",
					"total_egress"
				],
				"description": "Available metrics to query over time."
			},
			"MetricsStep": {
				"type": "integer",
				"format": "int32",
				"default": "60",
				"description": "Width of time in seconds to group data."
			},
			"ExposedPort": {
				"properties": {
					"transportType": {
						"$ref": "#/components/schemas/TransportType"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"host": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"transportType",
					"port",
					"host",
					"name"
				],
				"type": "object",
				"example": {
					"host": "1.proxy.hathora.dev",
					"name": "default",
					"port": 34567,
					"transportType": "tcp"
				},
				"description": "Connection information to an exposed port on an active process."
			},
			"Process": {
				"properties": {
					"egressedBytes": {
						"type": "number",
						"format": "double",
						"description": "Measures network traffic leaving the process in bytes.",
						"example": 435
					},
					"idleSince": {
						"type": "string",
						"format": "date-time",
						"nullable": true,
						"deprecated": true
					},
					"activeConnectionsUpdatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"activeConnections": {
						"type": "number",
						"format": "double",
						"description": "Tracks the number of active connections to a process.",
						"example": 10
					},
					"roomSlotsAvailableUpdatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"roomSlotsAvailable": {
						"type": "number",
						"format": "double",
						"description": "Tracks the number of room slots available on the process.",
						"example": 1
					},
					"draining": {
						"type": "boolean",
						"description": "Process in drain will not accept any new rooms."
					},
					"terminatedAt": {
						"type": "string",
						"format": "date-time",
						"nullable": true,
						"description": "When the process has been terminated."
					},
					"stoppingAt": {
						"type": "string",
						"format": "date-time",
						"nullable": true,
						"description": "When the process is issued to stop. We use this to determine when we should stop billing."
					},
					"startedAt": {
						"type": "string",
						"format": "date-time",
						"nullable": true,
						"description": "When the process bound to the specified port. We use this to determine when we should start billing."
					},
					"startingAt": {
						"type": "string",
						"format": "date-time",
						"description": "When the process started being provisioned."
					},
					"roomsPerProcess": {
						"$ref": "#/components/schemas/NumRoomsPerProcess"
					},
					"additionalExposedPorts": {
						"items": {
							"$ref": "#/components/schemas/ExposedPort"
						},
						"type": "array",
						"example": [
							{
								"host": "1.proxy.hathora.dev",
								"name": "debug",
								"port": 72941,
								"transportType": "tcp"
							}
						],
						"maxItems": 2
					},
					"exposedPort": {
						"$ref": "#/components/schemas/ExposedPort"
					},
					"port": {
						"type": "number",
						"format": "double",
						"deprecated": true
					},
					"host": {
						"type": "string",
						"deprecated": true
					},
					"region": {
						"$ref": "#/components/schemas/Region"
					},
					"processId": {
						"$ref": "#/components/schemas/ProcessId"
					},
					"deploymentId": {
						"$ref": "#/components/schemas/DeploymentId"
					},
					"appId": {
						"$ref": "#/components/schemas/AppId"
					}
				},
				"required": [
					"egressedBytes",
					"idleSince",
					"activeConnectionsUpdatedAt",
					"activeConnections",
					"roomSlotsAvailableUpdatedAt",
					"roomSlotsAvailable",
					"draining",
					"terminatedAt",
					"stoppingAt",
					"startedAt",
					"startingAt",
					"roomsPerProcess",
					"additionalExposedPorts",
					"port",
					"host",
					"region",
					"processId",
					"deploymentId",
					"appId"
				],
				"type": "object",
				"description": "A process object represents a runtime instance of your game server and its metadata."
			},
			"RoomStatus": {
				"type": "string",
				"enum": [
					"scheduling",
					"active",
					"suspended",
					"destroyed"
				],
				"example": "active",
				"description": "The allocation status of a room.\n\n`scheduling`: a process is not allocated yet and the room is waiting to be scheduled\n\n`active`: ready to accept connections\n\n`suspended`: room is unallocated from the process but can be rescheduled later with the same `roomId`\n\n`destroyed`: all associated metadata is deleted"
			},
			"RoomAllocationId": {
				"type": "string",
				"example": "e3a0aa32-1711-4036-acfa-008b96061a78",
				"description": "System generated unique identifier to an allocated instance of a room."
			},
			"RoomAllocation": {
				"properties": {
					"unscheduledAt": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"scheduledAt": {
						"type": "string",
						"format": "date-time"
					},
					"processId": {
						"$ref": "#/components/schemas/ProcessId"
					},
					"roomAllocationId": {
						"$ref": "#/components/schemas/RoomAllocationId"
					}
				},
				"required": [
					"unscheduledAt",
					"scheduledAt",
					"processId",
					"roomAllocationId"
				],
				"type": "object",
				"description": "Metadata on allocated instances of a room."
			},
			"Pick_Room.Exclude_keyofRoom.allocations__": {
				"properties": {
					"appId": {
						"$ref": "#/components/schemas/AppId"
					},
					"roomId": {
						"$ref": "#/components/schemas/RoomId"
					},
					"roomConfig": {
						"type": "string",
						"nullable": true
					},
					"status": {
						"$ref": "#/components/schemas/RoomStatus"
					},
					"currentAllocation": {
						"allOf": [
							{
								"$ref": "#/components/schemas/RoomAllocation"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"appId",
					"roomId",
					"roomConfig",
					"status",
					"currentAllocation"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Room.allocations_": {
				"$ref": "#/components/schemas/Pick_Room.Exclude_keyofRoom.allocations__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"RoomWithoutAllocations": {
				"$ref": "#/components/schemas/Omit_Room.allocations_"
			},
			"ProcessWithRooms": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Process"
					},
					{
						"properties": {
							"rooms": {
								"items": {
									"$ref": "#/components/schemas/RoomWithoutAllocations"
								},
								"type": "array"
							},
							"totalRooms": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"rooms",
							"totalRooms"
						],
						"type": "object"
					}
				]
			},
			"CreateRoomRequest": {
				"properties": {
					"roomConfig": {
						"type": "string",
						"description": "Optional configuration parameters for the room. Can be any string including stringified JSON. It is accessible from the room via getRoomInfo().",
						"maxLength": 10000
					},
					"region": {
						"$ref": "#/components/schemas/Region"
					}
				},
				"required": [
					"region"
				],
				"type": "object"
			},
			"Room": {
				"properties": {
					"currentAllocation": {
						"allOf": [
							{
								"$ref": "#/components/schemas/RoomAllocation"
							}
						],
						"nullable": true
					},
					"status": {
						"$ref": "#/components/schemas/RoomStatus"
					},
					"allocations": {
						"items": {
							"$ref": "#/components/schemas/RoomAllocation"
						},
						"type": "array"
					},
					"roomConfig": {
						"type": "string",
						"nullable": true
					},
					"roomId": {
						"$ref": "#/components/schemas/RoomId"
					},
					"appId": {
						"$ref": "#/components/schemas/AppId"
					}
				},
				"required": [
					"currentAllocation",
					"status",
					"allocations",
					"roomConfig",
					"roomId",
					"appId"
				],
				"type": "object",
				"description": "A room object represents a game session or match."
			},
			"StartingConnectionInfo": {
				"properties": {
					"status": {
						"type": "string",
						"enum": [
							"starting"
						],
						"nullable": false
					},
					"roomId": {
						"$ref": "#/components/schemas/RoomId"
					}
				},
				"required": [
					"status",
					"roomId"
				],
				"type": "object"
			},
			"ActiveConnectionInfo": {
				"properties": {
					"status": {
						"type": "string",
						"enum": [
							"active"
						],
						"nullable": false
					},
					"transportType": {
						"$ref": "#/components/schemas/TransportType"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"host": {
						"type": "string"
					},
					"roomId": {
						"$ref": "#/components/schemas/RoomId"
					}
				},
				"required": [
					"status",
					"transportType",
					"port",
					"host",
					"roomId"
				],
				"type": "object"
			},
			"ConnectionInfo": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/StartingConnectionInfo"
					},
					{
						"$ref": "#/components/schemas/ActiveConnectionInfo"
					}
				],
				"description": "Connection information to the default port."
			},
			"ConnectionInfoV2": {
				"properties": {
					"additionalExposedPorts": {
						"items": {
							"$ref": "#/components/schemas/ExposedPort"
						},
						"type": "array",
						"example": [
							{
								"host": "1.proxy.hathora.dev",
								"name": "debug",
								"port": 72941,
								"transportType": "tcp"
							}
						],
						"maxItems": 2
					},
					"exposedPort": {
						"$ref": "#/components/schemas/ExposedPort"
					},
					"status": {
						"type": "string",
						"enum": [
							"starting",
							"active"
						]
					},
					"roomId": {
						"$ref": "#/components/schemas/RoomId"
					}
				},
				"required": [
					"additionalExposedPorts",
					"status",
					"roomId"
				],
				"type": "object",
				"description": "Connection information for the default and additional ports."
			}
		},
		"securitySchemes": {
			"auth0": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "Hathora Cloud API",
		"version": "0.0.1",
		"description": "Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.",
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/apps/v1/list": {
			"get": {
				"operationId": "GetApps",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/ApplicationWithDeployment"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Returns an unsorted list of your organization’s [applications](https://hathora.dev/docs/concepts/hathora-entities#application). An application is uniquely identified by an `appId`.",
				"tags": [
					"AppV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": []
			}
		},
		"/apps/v1/create": {
			"post": {
				"operationId": "CreateApp",
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Application"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Create a new [application](https://hathora.dev/docs/concepts/hathora-entities#application).",
				"tags": [
					"AppV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AppConfig"
							}
						}
					}
				}
			}
		},
		"/apps/v1/update/{appId}": {
			"post": {
				"operationId": "UpdateApp",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Application"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Update data for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.",
				"tags": [
					"AppV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AppConfig"
							}
						}
					}
				}
			}
		},
		"/apps/v1/info/{appId}": {
			"get": {
				"operationId": "GetAppInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Application"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Get details for an [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.",
				"tags": [
					"AppV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					}
				]
			}
		},
		"/apps/v1/delete/{appId}": {
			"delete": {
				"operationId": "DeleteApp",
				"responses": {
					"204": {
						"description": "No content"
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Delete an [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Your organization will lose access to this application.",
				"tags": [
					"AppV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					}
				]
			}
		},
		"/auth/v1/{appId}/login/anonymous": {
			"post": {
				"operationId": "LoginAnonymous",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"AuthV1"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					}
				]
			}
		},
		"/auth/v1/{appId}/login/nickname": {
			"post": {
				"operationId": "LoginNickname",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"AuthV1"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginNicknameRequest"
							}
						}
					}
				}
			}
		},
		"/auth/v1/{appId}/login/google": {
			"post": {
				"operationId": "LoginGoogle",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"AuthV1"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginGoogleRequest"
							}
						}
					}
				}
			}
		},
		"/billing/v1/balance": {
			"get": {
				"operationId": "GetBalance",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"BillingV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": []
			}
		},
		"/billing/v1/paymentmethod": {
			"get": {
				"operationId": "GetPaymentMethod",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaymentMethod"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"BillingV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": []
			}
		},
		"/billing/v1/customerportalurl": {
			"post": {
				"operationId": "InitStripeCustomerPortalUrl",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"BillingV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CustomerPortalUrl"
							}
						}
					}
				}
			}
		},
		"/billing/v1/invoices": {
			"get": {
				"operationId": "GetInvoices",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Invoice"
									},
									"type": "array"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"BillingV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": []
			}
		},
		"/builds/v1/{appId}/list": {
			"get": {
				"operationId": "GetBuilds",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Build"
									},
									"type": "array"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Returns an array of [build](https://hathora.dev/docs/concepts/hathora-entities#build) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.",
				"tags": [
					"BuildV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					}
				]
			}
		},
		"/builds/v1/{appId}/info/{buildId}": {
			"get": {
				"operationId": "GetBuildInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Build"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Get details for an existing [build](https://hathora.dev/docs/concepts/hathora-entities#build) using `appId` and `buildId`.",
				"tags": [
					"BuildV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "buildId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/BuildId"
						}
					}
				]
			}
		},
		"/builds/v1/{appId}/create": {
			"post": {
				"operationId": "CreateBuild",
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Build"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Generate a new [build](https://hathora.dev/docs/concepts/hathora-entities#build) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. You can optionally pass in a `buildTag` to tag your build with a version. You need `buildId` to run a [build](https://hathora.dev/docs/concepts/hathora-entities#build).",
				"tags": [
					"BuildV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateBuildRequest"
							}
						}
					}
				}
			}
		},
		"/builds/v1/{appId}/run/{buildId}": {
			"post": {
				"operationId": "RunBuild",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string",
									"format": "byte"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Provide a tarball that will generate a container image for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Pass in `buildId` generated from Create Build.",
				"tags": [
					"BuildV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "buildId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/BuildId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"file": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"file"
								]
							}
						}
					}
				}
			}
		},
		"/builds/v1/{appId}/delete/{buildId}": {
			"delete": {
				"operationId": "DeleteBuild",
				"responses": {
					"204": {
						"description": "No content"
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Delete a [build](https://hathora.dev/docs/concepts/hathora-entities#build) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId` and `buildId`.",
				"tags": [
					"BuildV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "buildId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/BuildId"
						}
					}
				]
			}
		},
		"/deployments/v1/{appId}/list": {
			"get": {
				"operationId": "GetDeployments",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Deployment"
									},
									"type": "array"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Returns an array of [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.",
				"tags": [
					"DeploymentV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					}
				]
			}
		},
		"/deployments/v1/{appId}/info/{deploymentId}": {
			"get": {
				"operationId": "GetDeploymentInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Deployment"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Get details for an existing [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) using `appId`.",
				"tags": [
					"DeploymentV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "deploymentId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/DeploymentId"
						}
					}
				]
			}
		},
		"/deployments/v1/{appId}/create/{buildId}": {
			"post": {
				"operationId": "CreateDeployment",
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Deployment"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Create a new [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) and [build](https://hathora.dev/docs/concepts/hathora-entities#build).",
				"tags": [
					"DeploymentV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "buildId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/BuildId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeploymentConfig"
							}
						}
					}
				}
			}
		},
		"/discovery/v1/ping": {
			"get": {
				"operationId": "GetPingServiceEndpoints",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DiscoveryResponse"
								}
							}
						}
					}
				},
				"description": "Returns an array of all regions with a host and port that a client can directly ping.",
				"tags": [
					"DiscoveryV1"
				],
				"security": [],
				"parameters": []
			}
		},
		"/lobby/v1/{appId}/create/private": {
			"post": {
				"operationId": "CreatePrivateLobbyDeprecated",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RoomId"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"429": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"LobbyV1"
				],
				"deprecated": true,
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "region",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/Region"
						}
					},
					{
						"in": "query",
						"name": "local",
						"required": false,
						"schema": {
							"default": false,
							"type": "boolean"
						}
					}
				]
			}
		},
		"/lobby/v1/{appId}/create/public": {
			"post": {
				"operationId": "CreatePublicLobbyDeprecated",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RoomId"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"429": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"LobbyV1"
				],
				"deprecated": true,
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "region",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/Region"
						}
					},
					{
						"in": "query",
						"name": "local",
						"required": false,
						"schema": {
							"default": false,
							"type": "boolean"
						}
					}
				]
			}
		},
		"/lobby/v1/{appId}/list": {
			"get": {
				"operationId": "ListActivePublicLobbiesDeprecated",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Lobby"
									},
									"type": "array"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"LobbyV1"
				],
				"deprecated": true,
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "local",
						"required": false,
						"schema": {
							"default": false,
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "region",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/Region"
						}
					}
				]
			}
		},
		"/lobby/v2/{appId}/create/private": {
			"post": {
				"operationId": "CreatePrivateLobby",
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Lobby"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"429": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"LobbyV2"
				],
				"deprecated": true,
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "roomId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"initialConfig": {
										"$ref": "#/components/schemas/LobbyInitialConfig"
									},
									"region": {
										"$ref": "#/components/schemas/Region"
									}
								},
								"required": [
									"initialConfig",
									"region"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/lobby/v2/{appId}/create/public": {
			"post": {
				"operationId": "CreatePublicLobby",
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Lobby"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"429": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"LobbyV2"
				],
				"deprecated": true,
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "roomId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"initialConfig": {
										"$ref": "#/components/schemas/LobbyInitialConfig"
									},
									"region": {
										"$ref": "#/components/schemas/Region"
									}
								},
								"required": [
									"initialConfig",
									"region"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/lobby/v2/{appId}/create/local": {
			"post": {
				"operationId": "CreateLocalLobby",
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Lobby"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"429": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"LobbyV2"
				],
				"deprecated": true,
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "roomId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"initialConfig": {
										"$ref": "#/components/schemas/LobbyInitialConfig"
									},
									"region": {
										"$ref": "#/components/schemas/Region"
									}
								},
								"required": [
									"initialConfig",
									"region"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/lobby/v2/{appId}/create": {
			"post": {
				"operationId": "CreateLobby",
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Lobby"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"429": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Create a new [lobby](https://hathora.dev/docs/concepts/hathora-entities#lobby) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.",
				"tags": [
					"LobbyV2"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "roomId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateLobbyRequest"
							}
						}
					}
				}
			}
		},
		"/lobby/v2/{appId}/list/public": {
			"get": {
				"operationId": "ListActivePublicLobbies",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Lobby"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all active [lobbies](https://hathora.dev/docs/concepts/hathora-entities#lobby) for a given [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a `region`.",
				"tags": [
					"LobbyV2"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"description": "Region to filter by. If omitted, active public lobbies in all regions will be returned.",
						"in": "query",
						"name": "region",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/Region"
						}
					}
				]
			}
		},
		"/lobby/v2/{appId}/info/{roomId}": {
			"get": {
				"operationId": "GetLobbyInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Lobby"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Get details for an existing [lobby](https://hathora.dev/docs/concepts/hathora-entities#lobby) using `appId` and `roomId`.",
				"tags": [
					"LobbyV2"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "roomId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				]
			}
		},
		"/lobby/v2/{appId}/setState/{roomId}": {
			"post": {
				"operationId": "SetLobbyState",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Lobby"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Set the state of a [lobby](https://hathora.dev/docs/concepts/hathora-entities#lobby) using `appId` and `roomId`. State is intended to be set by the server and must be smaller than 1MB.",
				"tags": [
					"LobbyV2"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "roomId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SetLobbyStateRequest"
							}
						}
					}
				}
			}
		},
		"/logs/v1/{appId}/all": {
			"get": {
				"operationId": "GetLogsForApp",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string",
									"format": "byte"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Returns a stream of logs for an [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.",
				"tags": [
					"LogV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "query",
						"name": "follow",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/LogsFollow"
						}
					},
					{
						"in": "query",
						"name": "tailLines",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/TailLines"
						}
					},
					{
						"in": "query",
						"name": "region",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/Region"
						}
					}
				]
			}
		},
		"/logs/v1/{appId}/process/{processId}": {
			"get": {
				"operationId": "GetLogsForProcess",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string",
									"format": "byte"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Returns a stream of logs for a [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.",
				"tags": [
					"LogV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "processId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/ProcessId"
						}
					},
					{
						"in": "query",
						"name": "follow",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/LogsFollow"
						}
					},
					{
						"in": "query",
						"name": "tailLines",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/TailLines"
						}
					}
				]
			}
		},
		"/logs/v1/{appId}/deployment/{deploymentId}": {
			"get": {
				"operationId": "GetLogsForDeployment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string",
									"format": "byte"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Returns a stream of logs for a [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) using `appId` and `deploymentId`.",
				"tags": [
					"LogV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "deploymentId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/DeploymentId"
						}
					},
					{
						"in": "query",
						"name": "follow",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/LogsFollow"
						}
					},
					{
						"in": "query",
						"name": "tailLines",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/TailLines"
						}
					}
				]
			}
		},
		"/management/v1/sendverificationemail": {
			"post": {
				"operationId": "SendVerificationEmail",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerificationEmailResponse"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"ManagementV1"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VerificationEmailRequest"
							}
						}
					}
				}
			}
		},
		"/metrics/v1/{appId}/process/{processId}": {
			"get": {
				"operationId": "GetMetrics",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MetricsResponse"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Get metrics for a [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.",
				"tags": [
					"MetricsV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "processId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/ProcessId"
						}
					},
					{
						"description": "Available metrics to query over time.",
						"in": "query",
						"name": "metrics",
						"required": false,
						"schema": {
							"default": [
								"cpu",
								"memory",
								"rate_egress"
							],
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/MetricName"
							}
						}
					},
					{
						"description": "Unix timestamp. Default is current time.",
						"in": "query",
						"name": "end",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Unix timestamp. Default is -1 hour from `end`.",
						"in": "query",
						"name": "start",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "step",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/MetricsStep"
						}
					}
				]
			}
		},
		"/processes/v1/{appId}/list/running": {
			"get": {
				"operationId": "GetRunningProcesses",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/ProcessWithRooms"
									},
									"type": "array"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Returns an array of active [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.",
				"tags": [
					"ProcessesV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "query",
						"name": "region",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/Region"
						}
					}
				]
			}
		},
		"/processes/v1/{appId}/list/stopped": {
			"get": {
				"operationId": "GetStoppedProcesses",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Process"
									},
									"type": "array"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Returns an array of stopped [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.",
				"tags": [
					"ProcessesV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "query",
						"name": "region",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/Region"
						}
					}
				]
			}
		},
		"/processes/v1/{appId}/info/{processId}": {
			"get": {
				"operationId": "GetProcessInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Process"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Get details for an existing [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.",
				"tags": [
					"ProcessesV1"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "processId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/ProcessId"
						}
					}
				]
			}
		},
		"/rooms/v1/{appId}/create": {
			"post": {
				"operationId": "CreateRoomDeprecated",
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RoomId"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"402": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"RoomV1"
				],
				"deprecated": true,
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "query",
						"name": "roomId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateRoomRequest"
							}
						}
					}
				}
			}
		},
		"/rooms/v1/{appId}/info/{roomId}": {
			"get": {
				"operationId": "GetRoomInfoDeprecated",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Room"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"RoomV1"
				],
				"deprecated": true,
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "roomId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				]
			}
		},
		"/rooms/v1/{appId}/list/{processId}/active": {
			"get": {
				"operationId": "GetActiveRoomsForProcessDeprecated",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/RoomWithoutAllocations"
									},
									"type": "array"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"RoomV1"
				],
				"deprecated": true,
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "processId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/ProcessId"
						}
					}
				]
			}
		},
		"/rooms/v1/{appId}/list/{processId}/inactive": {
			"get": {
				"operationId": "GetInactiveRoomsForProcessDeprecated",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/RoomWithoutAllocations"
									},
									"type": "array"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"RoomV1"
				],
				"deprecated": true,
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "processId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/ProcessId"
						}
					}
				]
			}
		},
		"/rooms/v1/{appId}/destroy/{roomId}": {
			"post": {
				"operationId": "DestroyRoomDeprecated",
				"responses": {
					"204": {
						"description": "No content"
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"RoomV1"
				],
				"deprecated": true,
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "roomId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				]
			}
		},
		"/rooms/v1/{appId}/suspend/{roomId}": {
			"post": {
				"operationId": "SuspendRoomDeprecated",
				"responses": {
					"204": {
						"description": "No content"
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"RoomV1"
				],
				"deprecated": true,
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "roomId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				]
			}
		},
		"/rooms/v1/{appId}/connectioninfo/{roomId}": {
			"get": {
				"operationId": "GetConnectionInfoDeprecated",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConnectionInfo"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"RoomV1"
				],
				"deprecated": true,
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "roomId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				]
			}
		},
		"/rooms/v2/{appId}/create": {
			"post": {
				"operationId": "CreateRoom",
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConnectionInfoV2"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"402": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Create a new [room](https://hathora.dev/docs/concepts/hathora-entities#room) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId` and `region`.",
				"tags": [
					"RoomV2"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "query",
						"name": "roomId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateRoomRequest"
							}
						}
					}
				}
			}
		},
		"/rooms/v2/{appId}/info/{roomId}": {
			"get": {
				"operationId": "GetRoomInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Room"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Get details for an existing [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`.",
				"tags": [
					"RoomV2"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "roomId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				]
			}
		},
		"/rooms/v2/{appId}/list/{processId}/active": {
			"get": {
				"operationId": "GetActiveRoomsForProcess",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/RoomWithoutAllocations"
									},
									"type": "array"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Get all active [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.",
				"tags": [
					"RoomV2"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "processId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/ProcessId"
						}
					}
				]
			}
		},
		"/rooms/v2/{appId}/list/{processId}/inactive": {
			"get": {
				"operationId": "GetInactiveRoomsForProcess",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/RoomWithoutAllocations"
									},
									"type": "array"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Get all inactive [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.",
				"tags": [
					"RoomV2"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "processId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/ProcessId"
						}
					}
				]
			}
		},
		"/rooms/v2/{appId}/destroy/{roomId}": {
			"post": {
				"operationId": "DestroyRoom",
				"responses": {
					"204": {
						"description": "No content"
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Destroy a [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`. All associated metadata is deleted.",
				"tags": [
					"RoomV2"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "roomId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				]
			}
		},
		"/rooms/v2/{appId}/suspend/{roomId}": {
			"post": {
				"operationId": "SuspendRoom",
				"responses": {
					"204": {
						"description": "No content"
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Suspend a [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`. The room is unallocated from the process but can be rescheduled later using the same `roomId`.",
				"tags": [
					"RoomV2"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "roomId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				]
			}
		},
		"/rooms/v2/{appId}/connectioninfo/{roomId}": {
			"get": {
				"operationId": "GetConnectionInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConnectionInfoV2"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Get connection details to a [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`. Clients can call this endpoint without authentication.",
				"tags": [
					"RoomV2"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "appId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AppId"
						}
					},
					{
						"in": "path",
						"name": "roomId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RoomId"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "https://api.hathora.dev"
		},
		{
			"url": "/"
		}
	],
	"tags": [
		{
			"name": "AppV1",
			"description": "Operations that allow you manage your [applications](https://hathora.dev/docs/concepts/hathora-entities#application)."
		},
		{
			"name": "AuthV1",
			"description": "Operations that allow you to configure authentication for your [applications](https://hathora.dev/docs/concepts/hathora-entities#application)."
		},
		{
			"name": "BuildV1",
			"description": "Operations that allow you create and manage your [build](https://hathora.dev/docs/concepts/hathora-entities#build)."
		},
		{
			"name": "DeploymentV1",
			"description": "Operations that allow you configure and manage an application's [build](https://hathora.dev/docs/concepts/hathora-entities#build) at runtime."
		},
		{
			"name": "DiscoveryV1",
			"description": "Service that allows clients to directly ping all Hathora regions to get latency information"
		},
		{
			"name": "LobbyV2",
			"description": "Operations to create and manage [lobbies](https://hathora.dev/docs/concepts/hathora-entities#lobby)."
		},
		{
			"name": "LogV1",
			"description": "Operations to get logs by [applications](https://hathora.dev/docs/concepts/hathora-entities#application), [processes](https://hathora.dev/docs/concepts/hathora-entities#process), and [deployments](https://hathora.dev/docs/concepts/hathora-entities#deployment). We store 20GB of logs data."
		},
		{
			"name": "MetricsV1",
			"description": "Operations to get metrics by [process](https://hathora.dev/docs/concepts/hathora-entities#process). We store 72 hours of metrics data."
		},
		{
			"name": "ProcessesV1",
			"description": "Operations to get data on active and stopped [processes](https://hathora.dev/docs/concepts/hathora-entities#process)."
		},
		{
			"name": "RoomV2",
			"description": "Operations to create, manage, and connect to [rooms](https://hathora.dev/docs/concepts/hathora-entities#room)."
		}
	]
}